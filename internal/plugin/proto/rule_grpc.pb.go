// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: internal/plugin/proto/rule.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HCLvetRulePluginClient is the client API for HCLvetRulePlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HCLvetRulePluginClient interface {
	GetRuleInfo(ctx context.Context, in *GetRuleInfoRequest, opts ...grpc.CallOption) (*GetRuleInfoResponse, error)
	ExecuteRule(ctx context.Context, in *ExecuteRuleRequest, opts ...grpc.CallOption) (*ExecuteRuleResponse, error)
}

type hCLvetRulePluginClient struct {
	cc grpc.ClientConnInterface
}

func NewHCLvetRulePluginClient(cc grpc.ClientConnInterface) HCLvetRulePluginClient {
	return &hCLvetRulePluginClient{cc}
}

func (c *hCLvetRulePluginClient) GetRuleInfo(ctx context.Context, in *GetRuleInfoRequest, opts ...grpc.CallOption) (*GetRuleInfoResponse, error) {
	out := new(GetRuleInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.HCLvetRulePlugin/GetRuleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hCLvetRulePluginClient) ExecuteRule(ctx context.Context, in *ExecuteRuleRequest, opts ...grpc.CallOption) (*ExecuteRuleResponse, error) {
	out := new(ExecuteRuleResponse)
	err := c.cc.Invoke(ctx, "/proto.HCLvetRulePlugin/ExecuteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HCLvetRulePluginServer is the server API for HCLvetRulePlugin service.
// All implementations must embed UnimplementedHCLvetRulePluginServer
// for forward compatibility
type HCLvetRulePluginServer interface {
	GetRuleInfo(context.Context, *GetRuleInfoRequest) (*GetRuleInfoResponse, error)
	ExecuteRule(context.Context, *ExecuteRuleRequest) (*ExecuteRuleResponse, error)
	mustEmbedUnimplementedHCLvetRulePluginServer()
}

// UnimplementedHCLvetRulePluginServer must be embedded to have forward compatible implementations.
type UnimplementedHCLvetRulePluginServer struct {
}

func (UnimplementedHCLvetRulePluginServer) GetRuleInfo(context.Context, *GetRuleInfoRequest) (*GetRuleInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleInfo not implemented")
}
func (UnimplementedHCLvetRulePluginServer) ExecuteRule(context.Context, *ExecuteRuleRequest) (*ExecuteRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteRule not implemented")
}
func (UnimplementedHCLvetRulePluginServer) mustEmbedUnimplementedHCLvetRulePluginServer() {}

// UnsafeHCLvetRulePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HCLvetRulePluginServer will
// result in compilation errors.
type UnsafeHCLvetRulePluginServer interface {
	mustEmbedUnimplementedHCLvetRulePluginServer()
}

func RegisterHCLvetRulePluginServer(s grpc.ServiceRegistrar, srv HCLvetRulePluginServer) {
	s.RegisterService(&HCLvetRulePlugin_ServiceDesc, srv)
}

func _HCLvetRulePlugin_GetRuleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HCLvetRulePluginServer).GetRuleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HCLvetRulePlugin/GetRuleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HCLvetRulePluginServer).GetRuleInfo(ctx, req.(*GetRuleInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HCLvetRulePlugin_ExecuteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HCLvetRulePluginServer).ExecuteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HCLvetRulePlugin/ExecuteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HCLvetRulePluginServer).ExecuteRule(ctx, req.(*ExecuteRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HCLvetRulePlugin_ServiceDesc is the grpc.ServiceDesc for HCLvetRulePlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HCLvetRulePlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HCLvetRulePlugin",
	HandlerType: (*HCLvetRulePluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRuleInfo",
			Handler:    _HCLvetRulePlugin_GetRuleInfo_Handler,
		},
		{
			MethodName: "ExecuteRule",
			Handler:    _HCLvetRulePlugin_ExecuteRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/plugin/proto/rule.proto",
}
